NB. Problem 1
NB. N_m = m * k * (k + 1) / 2; k = floor((N - 1) / m)
NB. I derived that myself for the record
e1=:-:@(]*[:(*>:)[<.@(<:@[%])])
+/ 1 1 _1 * 1000 e1 3 5 15
NB. 233168

NB. Problem 2
s5 =: %:5
phi =: -:>:s5
binet =: s5 %~ (phi&^ - (-phi)&^@-)
invbinet =: [: <. [: phi&^. [: 0.5&+ s5&*
fib =: binet :. invbinet
e2 =: [:<:[:-:+&2&.(fib^:_1)
NB. 4.61373e6
NB. 4613731

NB. Problem 3
NB. Problem 3 is trivial with J's factoring-related primitives
NB. Might do this in some other language
e3 =: [: >./ q:
NB. Trivially calculated answer: 6587
NB. C solution was naive but not, like, horrible, and it handles a 12-digit 
NB.   number in about 12ms even without optimization

NB. Problem 4
NB. Find the largest palindrome made from the product of two 3-digit numbers.
NB. Generate all 6-digit palindromes:
pal6 =: (100000&<#]) 10 10 10 10 10 10 #. (,"1|."1)10 10 10 #: i. 1000
NB. Predicate to determine whether y is a 6-digit palindrome
ispal6 =: [:*/[:=/[:(3&{.,:[:|.3&}.) 10 10 10 10 10 10 & #:
NB. 6-digit products of all 3 digit numbers
prod3 =: (100000&<#]) , */~ 100 + i. 900
NB. All products of two 3-digit numbers that are 6-digit palindromes
pal6prod3 =: (ispal6"0 # ]) prod3
NB. Greatest product of two 3-digit numbers that is a six-digit palidrome
>./pal6prod3
NB. 906609
NB. 913 * 993

NB. Problem 5
NB. q: 2520 is instructive: 2 2 2 3 3 5 7
NB. Looks like we need the minimal bag of primes that can generate >:i.20
e5 =: [:<.^.~ NB. greatest factor of y resulting in <= x
factorization =: (,:20&e5) p: i. 8
*/^/factorization
NB. 232792560

NB. Problem 6
NB. Find the difference between the sum of the squares of the first one hundred
NB.   natural numbers and the square of the sum.
e6 =: [: (([:*:+/)-([:+/*:)) [: >: i.
25164150

NB. Problem 7
NB. 10001st prime
NB. Trivial with J
NB. Also kind of trivial with C
NB. Trivial J solution
e7 =: [:p:<:
NB. 104743
NB. C solution with sieve of Eratosthenes, sieve size 200K, executes in 7ms
NB.   without compiler optimization.

NB. Problem 8
NB. 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
NB. Given string s =: 73167...
NB. Tokenize and parse with nums =: ".,. s
nums =: ".,. s
NB. Slice into runs of 13 and take product, then take max
>./13 */;._3 nums
NB. 23514624000

NB. Problem 9
NB. a^2 + b^2 = c^2; a + b + c = 1000
NB. All triplets from 1 to 10
(],[,[:%:*:@[+*:@])"0/~ >:i. 10
NB. And flatten it out
>,<"1(],[,[:%:*:@[+*:@])"0/~ >:i. 10
NB. Filtering for equality to 1000
~.(([:1000&=+/)#])"1 >,<"1(],[,[:%:*:@[+*:@])"0/~ >:i. 1000
NB. 200 375 425
NB. Cha-Ching

NB. Problem 10
NB. Sum of primes below two million
NB. IS there a non-brute force way to do this?
NB. All primes less than y
i.&.(p:^:_1) NB. I like it when I can use the under adverb
+/i.&.(p:^:_1) 2000000
NB. 142913828922
NB. Not an elegant strategy, but fairly elegant implementation
NB.   if I dare say so myself.

NB. Problem 11
kernels =: ((|:,:]) 4 4 $ 1 0 0 0) , (],:|.) 4 4 $ 1 0 0 0 0
grid =: 20 20 $ 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
padgrid =: ([: |: (,"1) & 0 0 0)^:2 grid
subgrids =: (4 4) < ;._3 grid
>./^:_ >([:>./[:,*/"2)@(,:|:) each subgrids NB. max of all orthogonal chains (51267216)
mm4 =: >: ? 4 4 $ 4
ii4 =: =/~i.4
mm4 (([:*/^:2^)"2 (,:[:|.])) ii4 NB. products of diagonal and anti-diagonal of mm4
xdiags =: ([:*/^:2^)"2 (,:[:|.])
(xdiags&ii4) each subgrids
>./^:_ >(>./@xdiags&ii4) each subgrid NB. Max of all diagonal chains (70600674)
NB. Looks like it's 70600674

NB. Problem 12
NB. first triangular number to have over 500 divisors including 1 and self
divs =: [:0&=|~
ndivs =: [:+/]divs[:>:i.
utr =: : }. [: i. [: <. [: >: %: NB. pos ints up to root incl.
dtr =: (divs # ]) ([: utr ]) NB. divisors up to root incl.
NB. the number of divisors below the root is half of the number of
NB.   total divisors UNLESS the number in question is a square, in
NB.   which case subtract one to prevent the square root from being
NB.   counted twice.
issq =: [:0&=[:1&|%:
ndivs2 =: (+:@#@dtr - issq)"0
1 i.~500<ndivs2 +/\i. 20000 NB. index of first triangle where ndivs2 > 500
NB. 12375
12375 { +/\i. 20000
NB. 76576500
NB. and we confirm that ndivs2 is in fact > 500
ndivs2 76576500
NB. 576

NB. Problem 13
NB. Work out the first ten digits of the sum of the following 
NB.   one-hundred 50-digit numbers.
NB. 37107287533902102798797998220837590246510135740250
NB. 46376937677490009712648124896970078050417018260538
NB. 74324986199524741059474233309513058123726617309629
NB. 91942213363574161572522430563301811072406154908250
NB. 23067588207539346171171980310421047513778063246676
NB. 89261670696623633820136378418383684178734361726757
NB. 28112879812849979408065481931592621691275889832738
NB. 44274228917432520321923589422876796487670272189318
NB. 47451445736001306439091167216856844588711603153276
NB. 70386486105843025439939619828917593665686757934951
NB. 62176457141856560629502157223196586755079324193331
NB. 64906352462741904929101432445813822663347944758178
NB. 92575867718337217661963751590579239728245598838407
NB. 58203565325359399008402633568948830189458628227828
NB. 80181199384826282014278194139940567587151170094390
NB. 35398664372827112653829987240784473053190104293586
NB. 86515506006295864861532075273371959191420517255829
NB. 71693888707715466499115593487603532921714970056938
NB. 54370070576826684624621495650076471787294438377604
NB. 53282654108756828443191190634694037855217779295145
NB. 36123272525000296071075082563815656710885258350721
NB. 45876576172410976447339110607218265236877223636045
NB. 17423706905851860660448207621209813287860733969412
NB. 81142660418086830619328460811191061556940512689692
NB. 51934325451728388641918047049293215058642563049483
NB. 62467221648435076201727918039944693004732956340691
NB. 15732444386908125794514089057706229429197107928209
NB. 55037687525678773091862540744969844508330393682126
NB. 18336384825330154686196124348767681297534375946515
NB. 80386287592878490201521685554828717201219257766954
NB. 78182833757993103614740356856449095527097864797581
NB. 16726320100436897842553539920931837441497806860984
NB. 48403098129077791799088218795327364475675590848030
NB. 87086987551392711854517078544161852424320693150332
NB. 59959406895756536782107074926966537676326235447210
NB. 69793950679652694742597709739166693763042633987085
NB. 41052684708299085211399427365734116182760315001271
NB. 65378607361501080857009149939512557028198746004375
NB. 35829035317434717326932123578154982629742552737307
NB. 94953759765105305946966067683156574377167401875275
NB. 88902802571733229619176668713819931811048770190271
NB. 25267680276078003013678680992525463401061632866526
NB. 36270218540497705585629946580636237993140746255962
NB. 24074486908231174977792365466257246923322810917141
NB. 91430288197103288597806669760892938638285025333403
NB. 34413065578016127815921815005561868836468420090470
NB. 23053081172816430487623791969842487255036638784583
NB. 11487696932154902810424020138335124462181441773470
NB. 63783299490636259666498587618221225225512486764533
NB. 67720186971698544312419572409913959008952310058822
NB. 95548255300263520781532296796249481641953868218774
NB. 76085327132285723110424803456124867697064507995236
NB. 37774242535411291684276865538926205024910326572967
NB. 23701913275725675285653248258265463092207058596522
NB. 29798860272258331913126375147341994889534765745501
NB. 18495701454879288984856827726077713721403798879715
NB. 38298203783031473527721580348144513491373226651381
NB. 34829543829199918180278916522431027392251122869539
NB. 40957953066405232632538044100059654939159879593635
NB. 29746152185502371307642255121183693803580388584903
NB. 41698116222072977186158236678424689157993532961922
NB. 62467957194401269043877107275048102390895523597457
NB. 23189706772547915061505504953922979530901129967519
NB. 86188088225875314529584099251203829009407770775672
NB. 11306739708304724483816533873502340845647058077308
NB. 82959174767140363198008187129011875491310547126581
NB. 97623331044818386269515456334926366572897563400500
NB. 42846280183517070527831839425882145521227251250327
NB. 55121603546981200581762165212827652751691296897789
NB. 32238195734329339946437501907836945765883352399886
NB. 75506164965184775180738168837861091527357929701337
NB. 62177842752192623401942399639168044983993173312731
NB. 32924185707147349566916674687634660915035914677504
NB. 99518671430235219628894890102423325116913619626622
NB. 73267460800591547471830798392868535206946944540724
NB. 76841822524674417161514036427982273348055556214818
NB. 97142617910342598647204516893989422179826088076852
NB. 87783646182799346313767754307809363333018982642090
NB. 10848802521674670883215120185883543223812876952786
NB. 71329612474782464538636993009049310363619763878039
NB. 62184073572399794223406235393808339651327408011116
NB. 66627891981488087797941876876144230030984490851411
NB. 60661826293682836764744779239180335110989069790714
NB. 85786944089552990653640447425576083659976645795096
NB. 66024396409905389607120198219976047599490197230297
NB. 64913982680032973156037120041377903785566085089252
NB. 16730939319872750275468906903707539413042652315011
NB. 94809377245048795150954100921645863754710598436791
NB. 78639167021187492431995700641917969777599028300699
NB. 15368713711936614952811305876380278410754449733078
NB. 40789923115535562561142322423255033685442488917353
NB. 44889911501440648020369068063960672322193204149535
NB. 41503128880339536053299340368006977710650566631954
NB. 81234880673210146739058568557934581403627822703280
NB. 82616570773948327592232845941706525094512325230608
NB. 22918802058777319719839450180888072429661980811197
NB. 77158542502016545090413245809786882778948721859617
NB. 72107838435069186155435662884062257473692284509516
NB. 20849603980134001723930671666823555245252804609722
NB. 53503534226472524250874054075591789781264330331690

NB. eesh
NB. Presumably I could hunt around until i found some bignum library
NB.   that could do this for me, but let's take a moment to think
NB.   about how I might do this with normal ints.
NB. max of uint64 is 18446744073709551615
NB. We'll have to parcel it out, I guess. J can handle about 17 digits
NB.   before going into scientific notation. I know I can change the
NB.   defaults but it's more interesting to do my own ghetto bignum
NB.   addition algo.
>{.each ;:100 1($,)_1&{"1 strs
